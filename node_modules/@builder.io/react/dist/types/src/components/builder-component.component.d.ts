/// <reference types="node" />
import React from 'react';
import { BuilderContent } from './builder-content.component';
import { Builder, GetContentOptions, Subscription, BehaviorSubject, BuilderElement, BuilderContent as Content } from '@builder.io/sdk';
import onChange from '../../lib/on-change';
export { onChange };
import { Url } from 'url';
export interface BuilderComponentProps {
    modelName?: string;
    model?: string;
    name?: string;
    data?: any;
    builder?: Builder;
    entry?: string;
    apiKey?: string;
    codegen?: boolean;
    options?: GetContentOptions;
    contentLoaded?: (data: any, content: any) => void;
    renderLink?: (props: React.AnchorHTMLAttributes<any>) => React.ReactNode;
    contentError?: (error: any) => void;
    content?: Content;
    location?: Location | Url;
    onStateChange?: (newData: any) => void;
    noAsync?: boolean;
    emailMode?: boolean;
    ampMode?: boolean;
    inlineContent?: boolean;
    builderBlock?: BuilderElement;
    dataOnly?: boolean;
    hydrate?: boolean;
    isStatic?: boolean;
    context?: any;
    url?: string;
    isChild?: boolean;
    stopClickPropagationWhenEditing?: boolean;
}
export interface BuilderComponentState {
    state: any;
    update: (state: any) => any;
    updates: number;
    context: any;
    key: number;
}
export declare class BuilderComponent extends React.Component<BuilderComponentProps, BuilderComponentState> {
    static defaults: Pick<BuilderComponentProps, 'codegen'>;
    subscriptions: Subscription;
    onStateChange: BehaviorSubject<any, any>;
    asServer: boolean;
    contentRef: BuilderContent | null;
    styleRef: HTMLStyleElement | null;
    rootState: any;
    lastJsCode: string;
    lastHttpRequests: {
        [key: string]: string | undefined;
    };
    httpSubscriptionPerKey: {
        [key: string]: Subscription | undefined;
    };
    ref: HTMLElement | null;
    Component: any;
    get options(): {
        modelName?: string | undefined;
        model?: string | undefined;
        name?: string | undefined;
        data?: any;
        builder?: Builder | undefined;
        entry?: string | undefined;
        apiKey?: string | undefined;
        codegen?: boolean | undefined;
        options?: GetContentOptions | undefined;
        contentLoaded?: ((data: any, content: any) => void) | undefined;
        renderLink?: ((props: React.AnchorHTMLAttributes<any>) => React.ReactNode) | undefined;
        contentError?: ((error: any) => void) | undefined;
        content?: Content | undefined;
        location?: Location | Url | undefined;
        onStateChange?: ((newData: any) => void) | undefined;
        noAsync?: boolean | undefined;
        emailMode?: boolean | undefined;
        ampMode?: boolean | undefined;
        inlineContent?: boolean | undefined;
        builderBlock?: BuilderElement | undefined;
        dataOnly?: boolean | undefined;
        hydrate?: boolean | undefined;
        isStatic?: boolean | undefined;
        context?: any;
        url?: string | undefined;
        isChild?: boolean | undefined;
        stopClickPropagationWhenEditing?: boolean | undefined;
        children?: React.ReactNode;
    };
    get name(): string | undefined;
    private _asyncRequests?;
    private _errors?;
    private _logs?;
    get element(): HTMLElement | null;
    get inlinedContent(): Content | undefined;
    constructor(props: BuilderComponentProps);
    get builder(): Builder;
    getHtmlData(): any;
    get device(): "mobile" | "tablet" | "desktop";
    get locationState(): {
        path: any;
        query: {
            [key: string]: string;
        };
        search: any;
        pathname: any;
        hostname: any;
        host: any;
    };
    get deviceSizeState(): string;
    messageListener: (event: MessageEvent) => void;
    resizeFn: () => void;
    resizeListener: (this: any) => any;
    static renderInto(elementOrSelector: string | HTMLElement, props?: BuilderComponentProps, hydrate?: boolean, fresh?: boolean): void;
    mounted: boolean;
    componentDidMount(): void;
    updateState: (fn?: ((state: any) => void) | undefined) => void;
    get isPreviewing(): boolean;
    notifyStateChange(): void;
    processStateFromApi(state: {
        [key: string]: any;
    }): {
        [key: string]: any;
    };
    get location(): any;
    getCssFromFont(font: any, data?: any): string;
    componentWillUnmount(): void;
    getFontCss(data?: any): any;
    ensureFontsLoaded(data?: any): void;
    getCss(data?: any): any;
    get data(): any;
    componentDidUpdate(prevProps: BuilderComponentProps): void;
    checkStyles(data: any): void;
    reload(): void;
    get content(): Content | undefined;
    get useContent(): any;
    render(): JSX.Element;
    evalExpression(expression: string): string;
    throttledHandleRequest(propertyName: string, url: string): Promise<any>;
    handleRequest(propertyName: string, url: string): Promise<any>;
    unsubscribe(): void;
    handleBuilderRequest(propertyName: string, optionsString: string): void;
    onContentLoaded: (data: any, content: any) => void;
}
